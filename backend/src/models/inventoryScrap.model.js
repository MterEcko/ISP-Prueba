// backend/src/models/inventoryScrap.model.js
const { DataTypes } = require('sequelize');

module.exports = (sequelize) => {
  const InventoryScrap = sequelize.define('InventoryScrap', {
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    inventoryId: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: {
        model: 'Inventory',
        key: 'id'
      },
      comment: 'Referencia al item de inventario original'
    },
    originalQuantity: {
      type: DataTypes.DECIMAL(10, 3),
      allowNull: false,
      comment: 'Cantidad inicial del lote/rollo antes del consumo'
    },
    usedQuantity: {
      type: DataTypes.DECIMAL(10, 3),
      allowNull: false,
      defaultValue: 0,
      comment: 'Cantidad usada productivamente en la instalación'
    },
    scrapQuantity: {
      type: DataTypes.DECIMAL(10, 3),
      allowNull: false,
      defaultValue: 0,
      comment: 'Cantidad que se convirtió en scrap (no utilizable)'
    },
    scrapReason: {
      type: DataTypes.STRING(500),
      allowNull: true,
      comment: 'Motivo del scrap: "Sobra < 5m", "Tramo dañado", etc.'
    },
    scrapDate: {
      type: DataTypes.DATE,
      allowNull: false,
      defaultValue: DataTypes.NOW,
      comment: 'Fecha y hora cuando se generó el scrap'
    },
    technicianId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      references: {
        model: 'Users',
        key: 'id'
      },
      comment: 'Técnico que realizó el trabajo y generó el scrap'
    },
    ticketId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      references: {
        model: 'Tickets',
        key: 'id'
      },
      comment: 'Ticket de trabajo donde se generó el scrap'
    },
    costImpact: {
      type: DataTypes.DECIMAL(10, 2),
      allowNull: false,
      defaultValue: 0,
      comment: 'Impacto económico del scrap (cantidad * precio unitario)'
    },
    efficiency: {
      type: DataTypes.DECIMAL(5, 2),
      allowNull: false,
      defaultValue: 100,
      comment: 'Porcentaje de eficiencia (usedQuantity / originalQuantity * 100)'
    },
    unitType: {
      type: DataTypes.ENUM('piece', 'meters', 'grams', 'box', 'liters'),
      defaultValue: 'piece',
      comment: 'Tipo de unidad para las cantidades'
    },
    scrapThreshold: {
      type: DataTypes.DECIMAL(10, 3),
      allowNull: true,
      comment: 'Umbral mínimo por debajo del cual se considera scrap automático'
    },
    autoGenerated: {
      type: DataTypes.BOOLEAN,
      defaultValue: true,
      comment: 'true si fue generado automáticamente, false si fue manual'
    },
    notes: {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: 'Notas adicionales sobre el scrap generado'
    }
  }, {
    tableName: 'InventoryScrap',
    timestamps: true,
    indexes: [
      {
        fields: ['inventoryId']
      },
      {
        fields: ['technicianId']
      },
      {
        fields: ['scrapDate']
      },
      {
        fields: ['efficiency']
      }
    ]
  });

  return InventoryScrap;
};